import Head from 'next/head';
import { useContext, useState, useEffect } from "react";
import { GlobalContext } from "@utils/GlobalContext";
import Image from 'next/image';
import Link from 'next/link';
import { createClient } from '@supabase/supabase-js';
import { supabase } from '@libs/Supabase';
import SkeletonSongList from '@components/SkeletonSongList';
import nookies from 'nookies';

// export async function getServerSideProps() {
//   const supabaseAdmin = createClient(process.env.SUPABASE_URL || '', process.env.SUPABASE_ANON_KEY || '');

//   // const { data } = await supabaseAdmin.from('song').select(`*, artist (*)`).order('id');
//   const { data } = await supabaseAdmin
//     .from('song')
//     .select(`
//       id,
//       name,
//       youtubeId,
//       albumCoverUrl,
//       artistId,
//       artist (
//         id,
//         name,
//         genre,
//         coverUrl
//       )
//     `)
//     .order('id');

//   return {
//     props: {
//       songs: data
//     }
//   };
// }

export async function getServerSideProps(context) {
  // Parse
  const cookies = nookies.get(context)

  return {
    props: {
      cookies
    }
  }
}

// export default function Home({ songs }) {
export default function Home({ cookies }) {
  const { darkMode, setDarkMode } = useContext(GlobalContext);
  const [fetched, setFetched] = useState(false);
  const [songs, setSongs] = useState();
  const isLoggedIn = cookies.username ? true : false;

  async function getSong() {
    const { data } = await supabase.from('song').select(`*, artist (*)`).order('id');
    setSongs(data)
    setFetched(true)
  }

  async function deleteSong(id) {
    const { data, error } = await supabase.from('song').delete().eq('id', id);
    // console.log(data)
    // console.log(error)
    if (!error) {
      setFetched(false)
    }
  }

  useEffect(() => {
    if (!fetched || !songs) {
      getSong();
    }
  }, [fetched])

  return (
    <>
      <Head>
        <title>Songs List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen p-8 md:p-12">
        <div className="max-w-lg mx-auto">

          <nav className="flex justify-between mb-8 gap-x-4">
            <Link href="/">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Songs</a>
            </Link>
            <Link href="/artists">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Artists</a>
            </Link>
            {isLoggedIn ?
              <Link href="/logout">
                <a className="bg-red-500 px-2.5 py-0.5 text-white rounded hover:bg-red-600 text-sm  font-medium transition-all hover:cursor-pointer">Logout</a>
              </Link>
              :
              <Link href="/login">
                <a className="bg-blue-500 px-2.5 py-0.5 text-white rounded hover:bg-blue-600 text-sm font-medium transition-all hover:cursor-pointer">Login</a>
              </Link>
            }
            <div onClick={() => setDarkMode(!darkMode)} className="transition-all cursor-pointer w-12 h-7 dark:bg-blue-500 bg-neutral-200 rounded-full relative">
              <div className="h-5 w-5 bg-white rounded-full absolute top-1 transition-all dark:left-6 left-1"></div>
            </div>
          </nav>

          <div className="flex items-center justify-between">
            <h1 className="text-neutral-700 dark:text-gray-100 text-2xl font-bold">Song List</h1>
            {isLoggedIn &&
              <Link href="/add-song">
                <a className="bg-green-500 px-2.5 py-1 text-white rounded hover:bg-green-600 text-sm font-medium transition-all hover:cursor-pointer">Add Song</a>
              </Link>
            }
          </div>

          <div className="mt-8">
            {fetched ?
              songs.map(song =>
                <div key={song.id}>
                  <div className="border dark:border-neutral-800 rounded my-2">
                    <Link href={`song/${song.id}`}>
                      <div className="group">
                        <div className="flex items-center gap-4 transition duration-300 hover:cursor-pointer">
                          <div className="relative h-16 sm:h-24 w-16 sm:w-24">
                            <Image
                              alt={song.name}
                              src={song.albumCoverUrl}
                              className="rounded"
                              layout='fill'
                            />
                          </div>
                          <div className="p-2">
                            <h2 className="text-md sm:text-lg font-medium dark:text-white text-neutral-800 mb-2 group-hover:text-blue-500 transition duration-300">{song.name}</h2>
                            <p className="text-sm sm:text-base text-neutral-700 dark:text-gray-300">{song.artist.name}</p>
                          </div>
                        </div>
                      </div>
                    </Link>
                  </div>
                  {song.id > 15 && isLoggedIn &&
                    <>
                      <Link href={`song/edit/${song.id}`}>
                        <a className="text-white text-xs px-2 py-1 bg-blue-500 hover:bg-blue-600 transition-all rounded font-medium mr-2">Edit</a>
                      </Link>
                      <button onClick={() => deleteSong(song.id)} className="mb-2 text-white text-xs px-2 py-1 bg-red-500 hover:bg-red-600 transition-all rounded font-medium">Delete</button>
                    </>
                  }
                </div>
              )
              :
              <>
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
                <SkeletonSongList />
              </>
            }
            {/* {songs.map(song =>
              <div key={song.id} className="border dark:border-neutral-800 rounded my-2">
                <Link href={`song/${song.id}`}>
                  <div className="group">
                    <div className="flex items-center gap-4 transition duration-300 hover:cursor-pointer">
                      <div className="relative h-16 sm:h-24 w-16 sm:w-24">
                        <Image
                          alt={song.name}
                          src={song.albumCoverUrl}
                          className="rounded"
                          layout='fill'
                        />
                      </div>
                      <div className="p-2">
                        <h2 className="text-md sm:text-lg font-medium dark:text-white text-neutral-800 mb-2 group-hover:text-blue-500 transition duration-300">{song.name}</h2>
                        <p className="text-sm sm:text-base text-neutral-700 dark:text-gray-300">{song.artist.name}</p>
                      </div>
                    </div>
                  </div>
                </Link>
              </div>
            )} */}
          </div>

        </div>
      </main>
    </>
  )
}
