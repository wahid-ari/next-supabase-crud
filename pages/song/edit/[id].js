import Head from 'next/head'
import { useContext, useState, useEffect } from "react";
import { GlobalContext } from "@utils/GlobalContext";
import Link from 'next/link';
import Skeletons from '@components/Skeletons';
import { useRouter } from 'next/router';
import { supabase } from '@libs/Supabase';
import Button from '@components/Button';
import Input from '@components/Input';
import nookies from 'nookies';
import Router from "next/router";
import Select from "@components/Select";

export async function getServerSideProps(context) {
  // Parse
  const cookies = nookies.get(context)

  if (!cookies.username) {
    return {
      redirect: {
        destination: "/login"
      }
    }
  }

  return {
    props: {
      cookies
    }
  }
}

// export default function Song({ artist }) {
export default function Song({ cookies }) {
  const { darkMode, setDarkMode } = useContext(GlobalContext);
  const [fetched, setFetched] = useState(false);
  const [song, setSong] = useState();
  const [fetchedArtist, setFetchedArtist] = useState(false);
  const [artist, setArtist] = useState();
  const router = useRouter();
  const id = router.query.id;
  const isLoggedIn = cookies.username ? true : false;
  const [error, setError] = useState({ name: false, youtube: false, image: false });

  function handleSelectArtist(e) {
    if (e.target.value > 0) {
      let filtered = artist.filter(item => item.id == e.target.value)[0]
      setSong(
        {
          ...song,
          artistId: parseInt(e.target.value),
          artist: {
            id: parseInt(e.target.value),
            name: filtered.name
          }
        }
      )
    }
  };

  async function getArtist() {
    const { data } = await supabase.from('artist').select('id, name').order('id');
    setArtist(data);
    setFetchedArtist(true);
  }

  useEffect(() => {
    if (!artist || !fetchedArtist) {
      getArtist();
    }
  }, [fetchedArtist])

  async function getSong() {
    const { data } = await supabase.from('song').select(`*, artist (*)`).match({ id: id });
    if (data) {
      setSong(data[0])
      setFetched(true)
    }
  }

  useEffect(() => {
    if (!fetched || !song) {
      getSong();
    }
  }, [fetched, id])

  function handleChange(e) {
    setSong({
      ...song,
      [e.target.name]: e.target.value
    })
  }

  async function handleSubmit(e) {
    e.preventDefault();
    let inputError = false;
    if (!song.name) {
      setError({ ...error, name: true });
      inputError = true;
    }
    if (!song.youtubeId) {
      setError({ ...error, youtube: true });
      inputError = true;
    }
    if (!song.albumCoverUrl) {
      setError({ ...error, image: true });
      inputError = true;
    }
    if (!inputError) {
      // console.log("ready to insert");
      setError({ name: false, youtube: false, image: false });
      const { data, error } = await supabase
        .from('song')
        .update({
          name: song.name,
          youtubeId: song.youtubeId,
          albumCoverUrl: song.albumCoverUrl,
          artistId: song.artistId
        })
        .eq('id', id)
      // console.log(data);
      // console.log(error);
      if (!error) {
        Router.push("/");
      }
    }
  }

  return (
    <div>
      <Head>
        <title>Edit Song</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen p-8 md:p-12">
        <div className="max-w-lg mx-auto">

          <nav className="flex justify-between mb-8 gap-x-4">
            <Link href="/">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Songs</a>
            </Link>
            <Link href="/artists">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Artists</a>
            </Link>
            {isLoggedIn ?
              <Link href="/logout">
                <a className="bg-red-500 px-2.5 py-0.5 text-white rounded hover:bg-red-600 text-sm  font-medium transition-all hover:cursor-pointer">Logout</a>
              </Link>
              :
              <Link href="/login">
                <a className="bg-blue-500 px-2.5 py-0.5 text-white rounded hover:bg-blue-600 text-sm font-medium transition-all hover:cursor-pointer">Login</a>
              </Link>
            }
            <div onClick={() => setDarkMode(!darkMode)} className="transition-all cursor-pointer w-12 h-7 dark:bg-blue-500 bg-neutral-200 rounded-full relative">
              <div className="h-5 w-5 bg-white rounded-full absolute top-1 transition-all dark:left-6 left-1"></div>
            </div>
          </nav>

          {fetched ?
            <>
              <h1 className="text-center font-medium text-3xl dark:text-whitem dark:text-white mb-4">Edit Song</h1>

              <Input value={song.name} onChange={handleChange} label="Name" name="name" placeholder="Name" type="text" />
              {error.name && <p className="text-red-500 text-center mb-2 text-xs font-medium">Name must not empty</p>}

              <Input value={song.youtubeId} onChange={handleChange} label="Youtube URL (fuEdMCclYn0)" name="youtubeId" placeholder="JRmBXQWzVEg" type="text" />
              {song.youtubeId &&
                <div className="mt-4">
                  <div className="h-60 sm:h-72 lg:h-80 mb-4">
                    <iframe
                      width="100%"
                      height="100%"
                      src={`https://www.youtube.com/embed/${song.youtubeId}`}
                      frameBorder="0"
                      allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                      allowFullScreen
                    />
                  </div>
                </div>
              }
              {error.youtube && <p className="text-red-500 text-center mb-2 text-xs font-medium">Youtube must not empty</p>}

              <Input value={song.albumCoverUrl} onChange={handleChange} label="Image URL From Spotify (https://i.scdn.co/image/...)" name="albumCoverUrl" placeholder="https://i.scdn.co/image/ab67616d00001e02076747ead143aa3cd8c1d2f0" type="text" />
              {error.image && <p className="text-red-500 text-center mb-2 text-xs font-medium">Image URL must not empty</p>}

              {fetchedArtist ?
                <Select
                  label="Select Artist"
                  id="artist"
                  name="artist"
                  value={song.artist.id}
                  onChange={handleSelectArtist}
                >
                  <Select.option value={0} className="hidden">Select Artist</Select.option>
                  {artist.map(item =>
                    <Select.option key={item.id} value={item.id}>{item.name}</Select.option>
                  )}
                </Select>
                :
                <Skeletons />
              }

              <Button onClick={handleSubmit} className="w-full mt-4">Save Song</Button>
            </>
            :
            <>
              <Skeletons className="!h-16" />
              <Skeletons className="" />
              <Skeletons className="" />
              <Skeletons className="" />
              <Skeletons className="" />
            </>
          }
        </div>
      </main>
    </div>
  )
}
