import Head from 'next/head'
import { useContext, useState, useEffect } from "react";
import { GlobalContext } from "@utils/GlobalContext";
import Image from 'next/image';
import Link from 'next/link';
import { createClient } from '@supabase/supabase-js';
import { supabase } from '@libs/Supabase';
import SkeletonArtistList from '@components/SkeletonArtistList';
import { parseCookies } from 'nookies';

// export async function getServerSideProps() {
//   const supabaseAdmin = createClient(process.env.SUPABASE_URL || '', process.env.SUPABASE_ANON_KEY || '');

//   // const { data } = await supabaseAdmin.from('artist').select(`*, song (*)`).order('id');
//   const { data } = await supabaseAdmin
//     .from('artist')
//     .select(`
//       id,
//       name,
//       genre,
//       coverUrl,
//       song (
//         id,
//         name,
//         youtubeId,
//         albumCoverUrl,
//         artistId
//       )
//     `)
//     .order('id');

//   return {
//     props: {
//       artists: data
//     }
//   };
// }

// export default function Artists({ artists }) {
export default function Artists() {
  const { darkMode, setDarkMode } = useContext(GlobalContext);
  const [fetched, setFetched] = useState(false);
  const [artists, setArtists] = useState();
  const cookies = parseCookies();
  const isLoggedIn = cookies.username ? true : false;

  async function getArtists() {
    const { data } = await supabase.from('artist').select(`*, song (*)`).order('id');
    setArtists(data)
    setFetched(true)
  }

  useEffect(() => {
    if (!fetched || !artists) {
      getArtists();
    }
  }, [fetched])

  return (
    <>
      <Head>
        <title>Artists List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen p-8 md:p-12">
        <div className="max-w-lg mx-auto">

          <nav className="flex justify-between mb-8 gap-x-4">
            <Link href="/">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Songs</a>
            </Link>
            <Link href="/artists">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Artists</a>
            </Link>
            {isLoggedIn ?
              <Link href="/logout">
                <a className="bg-red-500 px-2.5 py-0.5 text-white rounded hover:bg-red-600 text-sm  font-medium transition-all hover:cursor-pointer">Logout</a>
              </Link>
              :
              <Link href="/login">
                <a className="bg-green-500 px-2.5 py-0.5 text-white rounded hover:bg-green-600 text-sm font-medium transition-all hover:cursor-pointer">Login</a>
              </Link>
            }
            <div onClick={() => setDarkMode(!darkMode)} className="transition-all cursor-pointer w-12 h-7 dark:bg-blue-500 bg-neutral-200 rounded-full relative">
              <div className="h-5 w-5 bg-white rounded-full absolute top-1 transition-all dark:left-6 left-1"></div>
            </div>
          </nav>

          <h1 className="text-neutral-700 dark:text-gray-100 text-2xl font-bold">Artist List</h1>
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
          </div>

          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            {fetched ?
              artists.map(artist =>
                <div key={artist.id} className="border dark:border-neutral-800 rounded my-2">
                  <Link href={`artist/${artist.id}`}>
                    <div className="group">
                      <div className="transition duration-300 hover:cursor-pointer">
                        <div className="relative h-56 md:h-52">
                          <Image
                            alt={artist.name}
                            src={artist.coverUrl}
                            className="rounded"
                            layout='fill'
                          />
                        </div>
                        <div className="p-3 flex justify-between">
                          <div>
                            <h2 className="text-md sm:text-lg font-medium dark:text-white text-neutral-800 group-hover:text-blue-500 transition duration-300">{artist.name}</h2>
                            <p className="text-sm sm:text-base text-neutral-700 dark:text-gray-300 mt-1">{artist.genre}</p>
                          </div>
                          <div className="flex items-end">
                            <p className="text-sm  text-neutral-700 dark:text-gray-300">{artist.song.length} song</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Link>
                </div>
              )
              :
              <>
                <SkeletonArtistList />
                <SkeletonArtistList />
                <SkeletonArtistList />
                <SkeletonArtistList />
              </>
            }
            {/* {artists.map(artist =>
              <div key={artist.id} className="border dark:border-neutral-800 rounded my-2">
                <Link href={`artist/${artist.id}`}>
                  <div className="group">
                    <div className="transition duration-300 hover:cursor-pointer">
                      <div className="relative h-56 md:h-52">
                        <Image
                          alt={artist.name}
                          src={artist.coverUrl}
                          className="rounded"
                          layout='fill'
                        />
                      </div>
                      <div className="p-3 flex justify-between">
                        <div>
                          <h2 className="text-md sm:text-lg font-medium dark:text-white text-neutral-800 group-hover:text-blue-500 transition duration-300">{artist.name}</h2>
                          <p className="text-sm sm:text-base text-neutral-700 dark:text-gray-300 mt-1">{artist.genre}</p>
                        </div>
                        <div className="flex items-end">
                          <p className="text-sm  text-neutral-700 dark:text-gray-300">{artist.song.length} song</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </Link>
              </div>
            )} */}
          </div>

        </div>
      </main>
    </>
  )
}
