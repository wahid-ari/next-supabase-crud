import { useContext, useState, useEffect } from "react";
import { GlobalContext } from "@utils/GlobalContext";
import Router from "next/router";
import Head from 'next/head';
import Input from '@components/Input';
import Button from '@components/Button';
import nookies from 'nookies';
import Link from "next/link";
import { supabase } from "@libs/Supabase";
import Select from "@components/Select";
import Skeletons from "@components/Skeletons";

export async function getServerSideProps(context) {
  // Parse
  const cookies = nookies.get(context)

  if (!cookies.username) {
    return {
      redirect: {
        destination: "/login"
      }
    }
  }

  return {
    props: {
      cookies
    }
  }
}

export default function AddSong({ cookies }) {
  const { darkMode, setDarkMode } = useContext(GlobalContext);
  const [fetchedArtist, setFetchedArtist] = useState(false);
  const [artist, setArtist] = useState();
  const [input, setInput] = useState({ name: "", youtube: "", image: "", artist: "" });
  const [error, setError] = useState({ name: false, youtube: false, image: false, artist: false });
  const [success, setSuccess] = useState();
  const isLoggedIn = cookies.username ? true : false;

  const [selectedArtist, setSelectedArtist] = useState({ id: "", name: "" });
  function handleSelectArtist(e) {
    if (e.target.value > 0) {
      let filtered = artist.filter(item => item.id == e.target.value)[0]
      setSelectedArtist({ id: e.target.value, name: filtered.name });
    } else {
      setSelectedArtist({ id: "", name: "" });
    }
  };

  async function getArtist() {
    const { data } = await supabase.from('artist').select('id, name').order('id');
    setArtist(data);
    setFetchedArtist(true);
  }

  useEffect(() => {
    if (!artist || !fetchedArtist) {
      getArtist();
    }
  }, [fetchedArtist])

  function handleChange(e) {
    setInput({
      ...input,
      [e.target.name]: e.target.value
    })
  }

  async function handleSubmit(e) {
    e.preventDefault();
    let inputError = false;
    if (!input.name) {
      setError({ ...error, name: true });
      inputError = true;
    }
    if (!input.image) {
      setError({ ...error, image: true });
      inputError = true;
    }
    if (!input.youtube) {
      setError({ ...error, youtube: true });
      inputError = true;
    }
    if (!selectedArtist.id) {
      setError({ ...error, artist: true });
      inputError = true;
    }
    if (!inputError) {
      console.log("ready to insert")
      setError({ name: false, youtube: false, image: false, artist: false })
      const { data, error } = await supabase
        .from('song')
        .insert([
          {
            name: input.name,
            youtubeId: input.youtube,
            albumCoverUrl: input.image,
            artistId: selectedArtist.id
          }
        ])
      // console.log(data);
      // console.log(error);
      if (!error) {
        Router.push("/");
      }
    }
  }

  return (
    <>
      <Head>
        <title>Add Song</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen p-8 md:p-12">

        <div className="max-w-lg mx-auto">

          <nav className="flex justify-between mb-8 gap-x-4">
            <Link href="/">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Songs</a>
            </Link>
            <Link href="/artists">
              <a className="text-blue-500 hover:text-blue-600 font-medium transition-all hover:cursor-pointer">Artists</a>
            </Link>
            {isLoggedIn &&
              <Link href="/logout">
                <a className="bg-red-500 px-2.5 py-0.5 text-white rounded hover:bg-red-600 text-sm  font-medium transition-all hover:cursor-pointer">Logout</a>
              </Link>
            }
            <div onClick={() => setDarkMode(!darkMode)} className="transition-all cursor-pointer w-12 h-7 dark:bg-blue-500 bg-neutral-200 rounded-full relative">
              <div className="h-5 w-5 bg-white rounded-full absolute top-1 transition-all dark:left-6 left-1"></div>
            </div>
          </nav>

          <section className="text-gray-600 body-font py-8 max-w-sm mx-auto">
            <h1 className="text-center font-medium text-3xl dark:text-whitem dark:text-white mb-4">Add Song</h1>

            <Input onChange={handleChange} label="Name" name="name" placeholder="Name" type="text" />
            {error.name && <p className="text-red-500 text-center mb-2 text-xs font-medium">Name must not empty</p>}

            <Input onChange={handleChange} label="Youtube URL (fuEdMCclYn0)" name="youtube" placeholder="JRmBXQWzVEg" type="text" />
            {input.youtube &&
              <div className="mt-4">
                <div className="h-60 sm:h-72 lg:h-80 mb-4">
                  <iframe
                    width="100%"
                    height="100%"
                    src={`https://www.youtube.com/embed/${input.youtube}`}
                    frameBorder="0"
                    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                  />
                </div>
              </div>
            }
            {error.youtube && <p className="text-red-500 text-center mb-2 text-xs font-medium">Youtube must not empty</p>}

            <Input onChange={handleChange} label="Image URL From Spotify (https://i.scdn.co/image/...)" name="image" placeholder="https://i.scdn.co/image/ab67616d00001e02076747ead143aa3cd8c1d2f0" type="text" />
            {error.image && <p className="text-red-500 text-center mb-2 text-xs font-medium">Image URL must not empty</p>}

            {fetchedArtist ?
              <Select
                label="Select Artist"
                id="artist"
                name="artist"
                onChange={handleSelectArtist}
              >
                <Select.option value={0} className="hidden">Select Artist</Select.option>
                {artist.map(item =>
                  <Select.option key={item.id} value={item.id}>{item.name}</Select.option>
                )}
              </Select>
              :
              <Skeletons />
            }
            {error.artist && <p className="text-red-500 text-center mb-2 text-xs font-medium">Artist must not empty</p>}

            <Button onClick={handleSubmit} className="w-full mt-4">Save Song</Button>
            {success && <p className="text-green-500 text-center mt-4 text-xs font-medium">{success}</p>}
          </section>

        </div>

      </main>

    </>
  )
}